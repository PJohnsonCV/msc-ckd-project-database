import matplotlib.pyplot as plt
from scipy import stats
import db_methods
import datetime as dt
import hashlib
from datetime import date

slope = 0
intercept = 0

def correlateX(x):
  return slope * x + intercept

def regressGFRvsOrdinalDate():
  patient_ids = db_methods.patientsSelectSampleCountGreaterThan(2,1)
  for patient in patient_ids:
    samples = db_methods.sampleSelectByIDFull(patient)
    for sample in samples:
      f_date = date(doby, dobm, dobd)
      l_date = date(recy, recm, recd)
      ordinal_age = (l_date - f_date) + 1



def updatePatientLinearRegression(pid=0):
  s = []
  x = []
  y = []
  # Query the database by a known patient ID, then process results if the query doesn't return empty or false (from bad query)
  all_results = db_methods.selectSampleResultsByPatientID(pid)
  if all_results != False and all_results != [] and len(all_results) > 1:
    # Loop through each row of the results to pull out the eGFR results of each blood sample
    # add the date and eGFR result to x and y axis lists, respectively
    # eGFR must be converted from str to float or the y axis won't be numeric/out of logical order
    for result in all_results:
      if result[3] == "Blood" and result[4] == "eGFR":
        s.append(result[1])
        x.append(dt.datetime.strptime(result[2],'%Y-%m-%d %H:%M').date().toordinal())
        y.append(float(result[6]))
    
    # Hash the list of samples to get a unique value, if found in the database, bypass doing the stats/update as there is no
    # change in previously used data
    h = hashlib.md5(str(s).encode('utf-8')).hexdigest()
    hash_results = db_methods.selectRegressionByPIDHash(pid, h)
    if hash_results == False or hash_results == [] or hash_results == None:
      global slope, intercept
      try:
        slope, intercept, r, p, std_err = stats.linregress(x, y)
      except:
        slope = 0 
        intercept = 0 
        r = 0 
        p = 0 
        std_err = 0
        print("Error with pid {}, values zeroed.".format(pid))
      d = dt.datetime.today().strftime("%Y-%m-%d %H:%M")
      n = len(x)
      db_methods.insertNewLinearRegression(pid, h, d, n, slope, intercept, r, p, std_err)
      #db_methods.commitAndClose()
    else:
      print("Not updated, pid({}), no change in existing data hash({})".format(pid, h))
  else: 
    print("{} not processed for conditional fail {} {} {}".format(pid, all_results!=False, all_results!=[], len(all_results)))
    print(all_results)
    
def getPatientLinearRegression(pid=0):
  s = []
  x = []
  y = []
  sample_results = all_results = db_methods.selectSampleResultsByPatientID(pid)
  regress_results = db_methods.selectLatestRegressionByPID(pid)
  if regress_results != False and regress_results != []:
    for result in sample_results:
      if result[3] == "Blood" and result[4] == "eGFR":
        s.append(result[1])
        x.append(dt.datetime.strptime(result[2],'%Y-%m-%d %H:%M').date().toordinal())
        y.append(float(result[6]))
    global slope, intercept
    slope = regress_results[0][4]
    intercept = regress_results[0][5]
    mymodel = list(map(correlateX, x))
    #print(mymodel)
    plt.scatter(x, y)
    plt.plot(x, mymodel)
    plt.show()
    print(regress_results)

def getAllLinearRegression():
  lr_results = db_methods.selectLatestRegressionByPID()
  if lr_results != False and lr_results != []:
    print("PID     |   MD5                              |   DateAdded        |  N     | slope                    | intersect             | r                       | p                      | std_err")
    print("--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
    for r in lr_results:
      print(str(r[0]).rjust(6, " "), " | ", r[1], " | ", r[2], " | ", str(r[3]).rjust(4, " "), " | ", str(r[4]).rjust(22, " "), " | ", str(r[5]).rjust(19, " "), " | ", str(r[6]).rjust(21, " "), " | ", str(r[7]).rjust(22, " "), " | ")
  else:
    print("No results: ", lr_results)

def runBatchRegression(pid_from=0, pid_to=1, commit_every=5):
  tick = 0
  target = round((pid_to - pid_from) / commit_every)
  target_multiplier = 1
  print("LR started: ", dt.datetime.today().strftime("%Y-%m-%d %H:%M"))
  for id in range (pid_from, pid_to):
    tick += 1
    pc = round(100 * (tick / (pid_to-pid_from)))
    #if pc % 10 == 0:
    #  print(pc, "% -", tick, dt.datetime.today().strftime("%Y-%m-%d %H:%M"), flush=True)
    updatePatientLinearRegression(id)
    if tick == target*target_multiplier:
      db_methods.commitAndClose()
      print("Committed ", pc, "%", flush=True)
      target_multiplier += 1
  db_methods.commitAndClose()
  print("LR stopped: ", dt.datetime.today().strftime("%Y-%m-%d %H:%M"))

if __name__ == '__main__':
  #getPatientLinearRegression(63357)
  runBatchRegression(24121,24122, 1)
  
  #getAllLinearRegression()
  # started 19/8 20:35
  # ended        23:05
  # 998 patients  2:30 -- 2-999
  # errors: 48 228 282 446 545

  # commit moved outside of loop
  # started 20/8 14:34
  # ended        15:39
  # 999 patients  1:05 -- 1001-1999
  # errors: 1380, 1965

  # tick moved before update
  # started 20/8 14:26
  # ended        14:37
  # 116 patients  0:11 -- 2001-2115
  # errors: ALL FAIL NO COMMIT

  # added print \n and flush=True so can see update, added timestamp too
  # started 21/8 14:41
  # ended        15:41
  # 884 patients  1:00 -- 2116-2999
  # errors: 2457 

  # 21/8 16:51 manual pids = 1000, 2000

  # added print @ 10%, commit @ 25%, min max 
  # started 21/8 16:56
  # ended        22:10
  # 5000 patients 5:15 -- 3000-8000
  # errors:  3275 3455 4112 4482 4647 4779 4832 5620 5754 5885 6020 7400 7861 7934

  
  # started 21/8 22:34
  # ended   22/8 03:55
  # 5000 patients 5:21 -- 8001-13000
  # errors:  9143 9818 10393 10709 10866 10945 12255 12260 

  # 
  # started 22/8   09:49
  # ended          20:38 
  # 10000 patients 10:49 -- 13001-23000
  # errors:  13080 13414 13442 13616 14219 14526 15235 15248 15259 15453 16729 17702 17946 19044 19120 19659 20046 20321 20854 21394 22064 

  # 23000 patients so far,
  # 33 = 0 results, 1604 = 1 result == ~1hour processing time
  # 23000/282033 = 8.15% therefore could save about 12 hours processing time 
  # added and len(all_results) > 1 to first condition, and a print to give rejection criteria (for audit later)
  # started 22/8   23:00
  # ended          04:19
  # 5000 patients - 5:19 -- 23001-28000
  # errors:   24377 24431 24446 24454 24500
  # skips: 24121 (1) 24467 (1)
  # ??? skipped 20% output at approx 00:00 (10%~11:30/30%@12:30)
  # not updated past 30$ at 00:38 but commits show 27996 records / up to 28000 pid @ 04:19. 
  # ctrl+c "ended" immediately
  # still processed some 1 sample counts
  # -> not listed 27807 

  # added committed flag for 25%, will be committing multiple times due to rounding to zero places
  # should now only commit once per 25% and another at 100%
  # started 23/8   08:56
  # ended          12:02
  # 3000 patients - 3:06 -- 28001-31000
  # errors:28160 28257 29337 29458 30380 
  # skips: 29166 29574 

  # pid31000=rec30944, pid1!=exist, 5 skips: 24121 24467 27807 29166 29574 
  # started 23/8   12:55
  # ended          18:07
  # 5000 patients - 5:12 -- 31001-36000
  # errors: 31393 31845 32271 32731 33667 33890 34031 34092 34346 34545 34842 35299 35382 35459 
  # skips: 31069 32792 33954 33984 34892 
  # ? 31012 

  # started 23/8   18:24
  # ended          06:42
  # 12000 patients 12:18 -- 36001-48000
  # errors: 36560 36588 37033 37235 37366 38391 38433 39277 39571 40742  40969 41136 41352 41460 41543 42170 43746 46570 47241 47369 47598 47896 47997
  # skips: 36488 38411 39300 40027 40875 41634 42752 42999 43708 45424 46085 46179 


  # started 24/8   07:23
  # ended          19:45
  # 12000 patients 12:22 -- 48001-60000
  # errors: 49758 50009 51044 51053  53278 53958 54095 54122 54621 55017 55627 55743 57291 58667  59160 
  # skips: 50462 51921 53232 56232 56333 56398(TF0) 59033 59670

  # started 24/8   20:23
  # ended   25/8   08:51        
  # 12000 patients 12:28 -- 60001-72000
  # errors: 61325 61906 62001 62591 63968 64632 65509 66474 68335 68545 69204 69363 70145 70175 71205 71221 71262 
  # skips: 60662 61118 61230 63220 65270 65295 66006 67971 68798(TF0) 69221 70105 71757 

  # 76h 51m so far

  # started 25/8   09:53
  # ended   26/8   14:36        
  # 28000 patients 28:43 -- 72001-100000
  # errors: 72046 72299 73118 73899 74010 74522 74622 74627 74947 75063 76208 76512 77188 77800 78054 79528 79556 79603 80131 81495 82520 82669 84630 85202 85847 85893 84630 85202 85847 85893 86382 87870 87906 88770 89514 90603 90785 90792 90928 91167 91226 91863 93053 94071 94086 91863 93053 94071 94086 94524 94666 96353 97326 97453 98804 98885 99271 99886 
  # skips: 72471 73277 73918 74348 74524(TF0) 76289 79380 79697 80012 80025 80797 81397 82145 83291 84122 85177 85817 85853 85955 84122 85177 85817 85853 85955 86558 88389 88492 89119 89597 89654 91339(TF0) 94501 94766 95128 98754 98756 98784 98798 99894 

  # changed handling of percentage complete interrupt
  # started 26/8     15:01  15:14 
  # ended   26/8     15:14  15:15      
  # 200 patients  --  0:13 100001-100200
  # 20 patients  --   0:01 100201-100220 multiple commits now working
  # errors: 100045
  # skips: .

  # started 26/8     15:16 
  # ended   26/8     17:04
  # 200 patients  --  1:48 100201-102000
  # errors: 100300 100489 100554 100955  
  # skips: 101366 101368 101713 101876 

  # started 26/8      18:57
  # ended   27/8      07:03
  # 12000 patients --   102001-114000
  # errors: 102401 103704 103913 106568 106757 107415 107487 107709 107928 107957 108262 108479 108737 108785 109743 110709 111108 111743 111940 112412 112602 112614 112871 112936 112945 112979 113193 113345 
  # skips: 102180 102187 102306 108458 110233 113839 

  # started 27/8      08:48
  # ended   30/8      09:28
  # 72000 patients -- 72:40 - 114001-186000  
  # errors
  # skips: 114832 115253 115302 115541 115876 116115 116369 117578 117621 117631 118253 120018  121651 121715 121852 122352 122410 122453 122464 123854 124597 124828 125217 125499 126062 126218 127360 127884 128319 128339 129028 130618 130978 131046 131136 131786 131839 132616 133490 134159 134456 134540 134883 135866 136005 136613 136958 137203 137461 137534 137647 139231 141340 142025 142102 142378 142906 144103 145624 146032 146311 146333 146742 148246 148296 148638 148847 149886 150431 150847 151005 151018 151330 151452 152629 153068 153306 153823 154119 154645 154936 155300 155460 155863 156994 158256 158522 158891 159165 159467 159609 159846 160393 160603 160805 160958 161084 161604 162021 162689 163448 164307 164544 165370 165709 165900 165918 165977 166412 166749 167043 167659 167673 169375 170467 170578 171391 171480 171793 80%@19:21
#110:28 + 76:51

  #started 30/8    09:49
  #ended   ~3/9    07:56
  #96,038 patients 94:07 - 186001-282038
  #20errors: 186243 186604 107097 187437 187931 187979 188595 190158 190428 190518 190584 190631 190881 191118 191128 191163 191254 191391 191860 191879 191884 191926 192075 192090 192091 192092 192419 192700 192813 193477 193502 193798 193915 194016 194131 194378 194624 194681 194714 194974 195057 195360 195524 195840 195841 195842 195843 195955 196014 196132 196865 197374 197533 197700 197764 198049 198164 198280 198310 198439 198440 198441 198670 198807 199278 199428 199684 200185 200467 200802 200844 200996 201032 201111 201226 201594 202091 202121 202142 202175 202397 202398 202399 202470 202732 202743 202836 202861 203653 203811 204048 204110 204127 204450 204619 204931
  #20skips:  186043 186047 186082 186123 186286 186719 186728 187129 187612 187670 188518 189042 189355 190235 190415 190583 190597 191169 191274 191315 191967 192358 192487 192933 193081 193215 193558 194078 194245 194315 194491 194955 195037 195096 195400 195402 195500 195552 195791 196161 196625 196632 197134 197397 197456 197467 197557 197593 197597 197674 197982 198300 198502 198588 198611 198614 199000 199149 199280 199637 199830 199976 200032 200274 200568 200774 201001 201007 201014 201200 201599 201883 202055 202206 202423 202424 202617 202701 202704 202716 202776 203054 203057 203321 203428 203459 203827 204035 204156 204443 204467 204476 204500 204791 204878 204970 205192 
  #40errors: 205242 205256 205284 205305 205306 205307 205308 206013 206400 206571 206637 206706 206958 207048 207448 207783 208077 208120 208482 208483 208484 209077 209078 209260 209445 209531 210520 210577 211372 211478 211824 211906 215532 212665 212942 212943 212944 212945 213601 214388 214408 214461 214507 214536 215546 215765 216376 216385 216690 217082 217272 217324 217433 217715 217926 217927 217928 217940 218647 218692 219005 219176 219199 219620 219690 220175 220825 221018 221066 221202 221292 221710 221812 222121 222321 222335 222412 222413 222414 222415 222860 222890 222955 223025 223073 223268 223269 223474 223627 
  #40skips
  #60errors
  #60skips:  224451 225608 225744 225841 225844 226671 226878 226995 227109 227496 227682 227802 227813 227902 228986 229180 229461 230581 230596 230617 230681 230912 231261 231321 232397 232901 232986 233209 233509 234030 234149 234224 234706 235382 235527 235823 235852 236011 236635 236888 237355 237417 237631 237668 237748 238090 238352 238714 238809 239128 239197 240136 240352 240371 240561 240967 241238 241287 241368 241416 241551 241695 241803 241905 242082 242209 242376 242490 242492 242534 242594 243073 243205 243481 243606 
  #80errors
  #80skips
  #100error
  #100skips