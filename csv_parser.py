# CSV Parser
# - Read a selected CSV file generated by TelePath (pseudoanonymised in Excel)
# - Format fields as required for database storage
# - Use SQL.py methods to insert data to database

from os import X_OK
import db_methods
import csv
import os.path
import time

identifiers = [
  "Date Rec'd",
  "Time Rec'd",
  "Hospital No.",
  "Lab No/Spec No",
  "Sex",
  "Age",
  "LOC"
]

def selectFile():
  file_path = input("Type the path and filename: ")
  if file_path.upper() == "QUIT":
      return False
  elif os.path.isfile(file_path):
      return file_path
  else:
      print("File not found. Try again or type 'QUIT'.")
      return selectFile()
  
#If a sample has a urine albumin result, it must be a urine sample
def bloodOrUrine(umic_result):
  if umic_result != "":
    return 0  #urine
  return 1    #blood

def processFile(selected_file):
  if selected_file != False:
    print("Start time: " + time.asctime(time.localtime()))
    with open(selected_file, 'r') as csv_file:
      csv_dict = csv.DictReader(csv_file)
      col_names = csv_dict.fieldnames
      analyte_codes = [test for test in col_names if test not in identifiers]
      analytes = getAnalyteIDs(analyte_codes)
      rcount=0
      for row in csv_dict:
        formatted_receipt = formatDateTime(row["Date Rec'd"], row["Time Rec'd"])
        determined_type = bloodOrUrine(row['UMICR'])
        checkPatient(pt_id=row['Hospital No.'], pt_sex=row['Sex'], pt_dob=row['Age'])
        sID = addSample(samp_id=row['Lab No/Spec No'], rec_date=formatted_receipt, samp_type=determined_type, pt_id=row['Hospital No.'])
        if sID != False and sID != None:
          for analyte in analytes:
            if row[analyte] != "":
              addResult(samp_id=sID,analyte_id=analytes[analyte],analyte_result=row[analyte])
        rcount=rcount+1
    print("End time: " + time.asctime(time.localtime()))     
  else:
    print("ERROR [csv_parser.processFile]: Called method with bad selected_file string.")    

def formatDateTime(dict_date, dict_time):
  fdate = "20" + dict_date[-2:] + "-" + dict_date[3:5] + "-" + dict_date[:2]
  return fdate + " " + dict_time

def checkPatient(pt_id, pt_sex, pt_dob):
  matches = db_methods.selectPatientCount(pt_id)
  if matches == 0:
    db_methods.insertNewPatient(study_id=pt_id, sex=pt_sex, date_of_birth=pt_dob, ethnicity=False)
    return 1
  return 0

def addSample(samp_id, rec_date, samp_type, pt_id):
  return db_methods.insertNewSample(samp_id, rec_date, samp_type, pt_id)

def getAnalyteIDs(tests):
  analytes = {}
  for test in tests:
    params = db_methods.selectAnalyteParameters(test)
    analytes[test] = params[0][0]
  return analytes

def addResult(samp_id, analyte_id, analyte_result):
  db_methods.insertNewResult(samp_id, analyte_id, analyte_result)

os.system('cls||clear')
#processFile(r"C:\\Users\\Paul\\Documents\\gitstuff\\ckd-analysis\\example_data.csv")
#processFile(r"/home/pjohnson/ckd-analysis/example_data.csv")
